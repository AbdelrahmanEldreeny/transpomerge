# -*- coding: utf-8 -*-
"""TranspoMerge annotation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kwHXE_jn-hHy2WCTOUtyBoj4WUyadcii
"""

pip install biopython

import csv
import os
from Bio import SeqIO, Entrez
from Bio.Blast import NCBIWWW, NCBIXML

class Annotation:
    def __init__(self, email, input_file):
        #initialize the Annotation class with an email and input file
        Entrez.email= email
        self.input_file= os.path.join(os.getcwd(), input_file_name)  #the path to the input FASTA file

    def perform_blast_search(self):
       #Perform BLAST search for each sequence in the input file.
       #Returns a list of top accession numbers corresponding to each sequence

        accession_numbers = []  # List to store accession numbers
        with open(self.input_file, 'r') as file:
            for record in SeqIO.parse(file, "fasta"):
                #perform a BLAST search against the 'nt' database
                result_handle = NCBIWWW.qblast("blastn", "nt", record.seq)
                blast_record = NCBIXML.read(result_handle)

                # Extract the top accession number from BLAST results
                if blast_record.alignments:
                    top_alignment = blast_record.alignments[0]
                    accession = top_alignment.accession
                    accession_numbers.append(accession)

        return accession_numbers

        #why didn't i search entrez with the sequences at once? because the sequeces are too long for entrez to search for. that's why i did blast first then searched entrez with the accession number

    def get_gene_info(self, accession_numbers):
        #fetch gene information for each accession number.
        #returns a list of tuples containing gene names and functions.

        gene_info = []  # list to store gene information
        for accession in accession_numbers:
            try:
                #retrieve detailed gene information from GenBank
                handle = Entrez.efetch(db="nucleotide", id=accession, rettype="gb", retmode="text")
                record = SeqIO.read(handle, "genbank")
                gene_name = record.name
                gene_function = record.description
                gene_info.append((gene_name, gene_function))
            except Exception as e:
                print(f"Error fetching gene info for accession '{accession}': {e}")

        return gene_info

    def save_to_csv(self, gene_info):
        """
        Save gene information to a CSV file.
        """
        with open('gene_info.csv', 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(["Gene Name", "Function"])  # Write header
            for info in gene_info:
                writer.writerow(info)  # Write each gene's information

if __name__ == "__main__":
    #execution block
    # Create an instance of the Annotation class
    annotation = Annotation(
        email='s-sama.el-taher@zewailcity.edu.eg',
        input_file_name='insrt_seqs'
    )

    # Perform BLAST search and retrieve gene information
    accession_numbers = annotation.perform_blast_search()
    gene_info = annotation.get_gene_info(accession_numbers)

    # Save the gene information to a CSV file
    annotation.save_to_csv(gene_info)
    print("Gene information saved to gene_info.csv")

from google.colab import drive
drive.mount('/content/drive')
